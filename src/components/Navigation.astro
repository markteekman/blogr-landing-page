---
import ResponsiveToggle from './ResponsiveToggle.astro'
---

<div id="main-navigation" class="is-desktop color-neutral">
  <div class="container md:relative">
    <a href="/">
      <svg aria-label="Blogr logo" width="101" height="40" xmlns="http://www.w3.org/2000/svg"><path d="M0 30.803V1.486h10.653c1.982 0 3.695.31 5.14.93 1.446.619 2.56 1.5 3.345 2.642.785 1.142 1.177 2.484 1.177 4.026 0 1.404-.303 2.636-.909 3.695a6.48 6.48 0 01-2.56 2.498c1.487.578 2.643 1.494 3.469 2.746.826 1.253 1.239 2.732 1.239 4.439 0 1.707-.44 3.18-1.322 4.418-.88 1.239-2.12 2.202-3.716 2.89-1.596.688-3.482 1.033-5.657 1.033H0zM5.946 6.565v6.73h4.046c1.35 0 2.388-.282 3.118-.846.73-.564 1.094-1.397 1.094-2.498 0-1.101-.365-1.94-1.094-2.519-.73-.578-1.769-.867-3.118-.867H5.946zm0 19.159h4.624c1.542 0 2.732-.33 3.572-.991.84-.66 1.26-1.61 1.26-2.85 0-1.238-.42-2.188-1.26-2.848-.84-.66-2.03-.991-3.572-.991H5.946v7.68zm19.282 5.079V0h5.781v30.803h-5.78zm20.893.619c-1.624 0-3.124-.29-4.5-.867a10.94 10.94 0 01-3.593-2.416 10.96 10.96 0 01-2.374-3.654c-.564-1.404-.846-2.931-.846-4.583 0-1.652.289-3.173.867-4.563a11.354 11.354 0 012.415-3.654 10.96 10.96 0 013.634-2.436c1.39-.578 2.91-.867 4.562-.867 1.625 0 3.125.289 4.501.867a10.94 10.94 0 013.592 2.416 11.01 11.01 0 012.375 3.633c.564 1.39.846 2.911.846 4.563 0 1.651-.289 3.179-.867 4.583a11.297 11.297 0 01-2.416 3.675 10.96 10.96 0 01-3.633 2.436c-1.39.578-2.911.867-4.563.867zm.083-5.203c1.046 0 1.982-.275 2.808-.825.825-.551 1.48-1.301 1.96-2.25.483-.95.723-2.03.723-3.242 0-1.211-.24-2.292-.722-3.241-.482-.95-1.136-1.7-1.961-2.25-.826-.551-1.762-.826-2.808-.826-1.046 0-1.982.275-2.808.825-.826.55-1.48 1.301-1.961 2.25-.482.95-.723 2.03-.723 3.242 0 1.211.241 2.292.723 3.241.482.95 1.135 1.7 1.961 2.25.826.551 1.762.826 2.808.826zm24.155 3.964a9.13 9.13 0 01-3.86-.826 9.492 9.492 0 01-3.118-2.291c-.881-.977-1.57-2.12-2.065-3.427-.495-1.308-.743-2.719-.743-4.233 0-1.569.255-3.02.764-4.356a10.614 10.614 0 012.147-3.489 10.174 10.174 0 013.22-2.333c1.225-.564 2.554-.846 3.985-.846 1.404 0 2.67.282 3.799.846a7.402 7.402 0 012.807 2.457l.124-2.684h5.327v19.2c0 1.68-.269 3.207-.805 4.584-.537 1.376-1.301 2.56-2.292 3.55a10.231 10.231 0 01-3.53 2.292c-1.363.537-2.87.805-4.522.805-1.624 0-3.083-.254-4.376-.764a10.468 10.468 0 01-3.386-2.126 10.035 10.035 0 01-2.271-3.18L67.097 32a5.452 5.452 0 001.92 1.879c.784.454 1.672.681 2.663.681 1.074 0 2.003-.24 2.787-.723.785-.481 1.397-1.156 1.838-2.023.44-.867.66-1.879.66-3.035v-1.775a7.793 7.793 0 01-2.828 2.333c-1.143.564-2.402.846-3.778.846zm1.404-5.12c1.018 0 1.92-.254 2.704-.764a5.556 5.556 0 001.879-2.064c.468-.867.702-1.851.702-2.952 0-1.102-.234-2.086-.702-2.953a5.556 5.556 0 00-1.879-2.064c-.784-.51-1.686-.764-2.704-.764-1.019 0-1.92.255-2.705.764a5.556 5.556 0 00-1.879 2.064c-.468.867-.702 1.851-.702 2.953 0 1.1.234 2.085.702 2.952a5.556 5.556 0 001.88 2.064c.784.51 1.685.764 2.704.764zm15.607 5.74V9h5.327l.206 3.304c.55-1.157 1.294-2.044 2.23-2.664.936-.62 2.037-.929 3.303-.929.386 0 .77.035 1.156.103.386.07.73.159 1.033.269l-.62 5.698a4.361 4.361 0 00-.929-.227 7.495 7.495 0 00-.97-.062c-1.597 0-2.822.489-3.675 1.466-.853.977-1.28 2.36-1.28 4.15v10.694h-5.78z" fill="#FFF" fill-rule="nonzero"/></svg>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu">
        <ul>
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu">
      <ul>
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation')
  const mainMenu = mainNav.querySelector('ul')
  const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

  // functions
  const setActiveMenuItem = () => {
    const menuItems = [...mainMenu.querySelectorAll('a:not([rel*="external"])')]

    menuItems.forEach((menuItem) => {
      if (menuItem.pathname === window.location.pathname) {
        menuItem.classList.add('is-active')
        menuItem.setAttribute('aria-current', 'page')
      }
    })
  }

  const toggleResponsiveMenu = () => {
    const mediaQuery = window.matchMedia('(max-width: 768px)')

    if (mediaQuery.matches) {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')
    } else {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')
    }
  }

  const openDropdownMenu = (dropdownMenu) => {
    const dropdownList = dropdownMenu.parentNode.querySelector('ul')

    dropdownMenu.classList.add('show')
    dropdownMenu.setAttribute('aria-expanded', 'true')
  }

  const closeDropdownMenu = (dropdownMenu) => {
    dropdownMenu.classList.remove('show')
    dropdownMenu.setAttribute('aria-expanded', 'false')
  }

  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i])
    }
  }

  const toggleDropdownMenu = (event) => {
    if (event.target.getAttribute('aria-expanded') === 'false') {
      closeAllDropdownMenus()
      openDropdownMenu(event.target)
    } else {
      closeDropdownMenu(event.target)
    }
  }

  // execution
  mainMenu &&
    mainMenu.addEventListener('keydown', (event) => {
      const currentMenuItem = event.target.closest('li')
      const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
      const currentDropdownMenu = event.target.closest('.has-dropdown button')
      const currentDropdownMenuItem = event.target.closest('.has-dropdown li')
      const currentIndex = menuItems.findIndex(
        (item) => item === currentMenuItem
      )

      const key = event.key
      let targetItem

      if (key === 'ArrowRight') {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0]
        } else {
          targetItem = menuItems[currentIndex + 1]
        }
      }

      if (key === 'ArrowLeft') {
        if (menuItems.indexOf(currentMenuItem) === 0) {
          targetItem = menuItems[menuItems.length - 1]
        } else {
          targetItem = menuItems[currentIndex - 1]
        }
      }

      if (key === 'Escape') {
        targetItem = menuItems[0]
      }

      if (currentDropdownMenu) {
        const firstDropdownItem =
          currentDropdownMenu.nextElementSibling.querySelector('li')

        if (key === 'ArrowDown') {
          event.preventDefault()
          openDropdownMenu(currentDropdownMenu)
          targetItem = firstDropdownItem
        }

        if (key === 'Escape') {
          closeDropdownMenu(currentDropdownMenu)
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode
        const dropdownMenuItems = [
          ...currentDropdownList.querySelectorAll('li'),
        ]
        const currentIndex = dropdownMenuItems.findIndex(
          (item) => item === currentDropdownMenuItem
        )

        if (key === 'ArrowDown') {
          event.preventDefault()

          if (
            dropdownMenuItems.indexOf(currentDropdownMenuItem) ===
            dropdownMenuItems.length - 1
          ) {
            targetItem = dropdownMenuItems[0]
          } else {
            targetItem = dropdownMenuItems[currentIndex + 1]
          }
        }

        if (key === 'ArrowUp') {
          event.preventDefault()

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
            targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
          } else {
            targetItem = dropdownMenuItems[currentIndex - 1]
          }
        }

        if (key === 'Escape') {
          const currentDropdownMenu = currentDropdownList.previousElementSibling
          targetItem = currentDropdownMenu.parentNode
          closeAllDropdownMenus()
        }
      }

      if (targetItem) {
        targetItem.querySelector('a, button, input').focus()
      }
    })

  dropdownMenus &&
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener('click', toggleDropdownMenu)
    })


  toggleResponsiveMenu()
  window.addEventListener('resize', toggleResponsiveMenu)
  window.addEventListener('click', (event) => {
    if (
      !event.target.hasAttribute('aria-haspopup') &&
      !event.target.classList.contains('submenu-item')
    ) {
      closeAllDropdownMenus()
    }
  })
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/border' as *;
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/elevation' as *;
  @use '../assets/scss/base/outline' as *;
  @use '../assets/scss/base/size' as *;

  #main-navigation {
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      padding-top: 3rem;
      padding-bottom: 3rem;

      svg path {
        fill: var(--neutral-900);
      }

      @apply md:justify-start md:gap-16
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        z-index: 0;
        position: static;
      }

      .mobile-menu {
        display: none;
      }
    }

    &.is-mobile {
      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        font-weight: bold;
      }

      a,
      button {
        color: var(--theme-menu-items);
        text-decoration: none;
        font-family: var(--font-family-special);
        font-weight: 500;

        @include breakpoint(medium) {
          color: var(--neutral-900)
        }

        &:hover,
        &:focus {
          text-decoration: underline;
        }
      }

      .cta-button {
        width: auto;
      
        a {
          padding: 0.5rem 2rem;
          color: var(--neutral-900);
          background-image: var(--theme-gradient-cta);
          border-radius: 5rem;
          transition: all 0.2s ease-in-out;

          @include breakpoint(medium) {
            color: var(--theme-cta-text);
            background-image: none;
            background-color: var(--neutral-900);

            &:hover,
            &:focus {
              color: var(--neutral-100);
            }
          }
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      margin-top: 2rem;
      padding: 2rem 1.5rem;
      background-color: var(--theme-body-bg);
      border-radius: 0.5rem;
      @include elevation-300;

      > ul {
        flex-direction: column;
        align-items: center;

        ul {
          position: relative;
          margin-top: 1rem;
        }

        li {
          width: 100%;
          text-align: center;

          &.cta-button {
            width: auto;
          }
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
        padding: 0;
        margin-top: -1px;
        border: none;
        @include size-16;

        &::after {
          content: '';
          width: 0.5rem;
          height: 0.5em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.15em 0.15em 0 0;
          transform: rotate(135deg);
          border-color: var(--theme-cta-text);

          @include breakpoint(medium) {
            border-color: var(--neutral-900);
          }
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;

            @include breakpoint(medium) {
              gap: 1rem;
            }
          
            a {
              color: var(--theme-menu-items);
              opacity: 0.75;

              &:hover,
              &:focus {
                font-weight: bold;
              }
            }
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        padding: 1rem;
        background-color: var(--theme-menu-dropdown);
        @include radius-large;

        @include breakpoint(medium) {
          min-width: 175px;
          top: 175%;
          padding: 2rem 1.5rem;
          background-color: var(--theme-body-bg);
          @include elevation-400;
        }
      }
    }
  }
</style>
